require "spec_helper"

describe User do
  ## DEFAULT TEST CASES
  
  # Default - autogenerated
  it "should pass assert true sanity test" do
    assert true
  end
  
  # Success
  it "should be created if username and password is correct" do
    user = User.new(:username => "andy", :password => "a")
    assert user.save
  end
  
  # Count is registered correctly
  it "should have the correct count if user correctly created" do
    user = User.new(:username => "james", :password => "a", :count => 1)
    user.save
    retrieved = User.find_by_username("james")
    assert retrieved[:count] == 1
  end
  
  ## USERNAME TEST
  
  # Username not empty
  it "name should not be empty" do
    user = User.new(:username => "", :password => "a")
    assert !user.save
  end
  
  # Username not exceed 128 characters
  it "name should not exceed 128 characters" do
    user = User.new(:username => "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", :password => "a")
    assert !user.save
  end
  
  # Username exists
  it "name should not exist already" do
    user1 = User.new(:username => "andy", :password => "a")
    assert user1.save
    user2 = User.new(:username => "andy", :password => "b")
    assert !user2.save
  end
  
  ## PASSWORD TEST
  
  # Password can be empty
  it "password can be empty" do
    user = User.new(:username => "james", :password => "")
    assert user.save
  end
  
  # Password can be same as long as username is different
  it "password can be same as long as username is different" do
    user1 = User.new(:username => "andy", :password => "a")
    assert user1.save
    user2 = User.new(:username => "james", :password => "a")
    assert user2.save
  end
  
  # Password not exceed 128 characters
  it "password should not exceed 128 characters" do
    user = User.new(:username => "andy", :password => "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890")
    assert !user.save
  end
  
  ## ERROR MESSAGE TEST
  
  # Username not empty
  it "name empty should have correct error message" do
    user = User.new(:username => "", :password => "a")
    user.save
    assert user.errors.full_messages[0] == "Username can't be blank"
  end
  
  # Username not exceed 128 characters
  it "name exceeds 128 characters should have correct error message" do
    user = User.new(:username => "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", :password => "a")
    user.save
    assert user.errors.full_messages[0] == "Username is too long (maximum is 128 characters)"
  end
  
  # Username exists
  it "name does exist should have correct error message" do
    user1 = User.new(:username => "andy", :password => "a")
    user1.save
    user2 = User.new(:username => "andy", :password => "b")
    user2.save
    assert user2.errors.full_messages[0] == "Username has already been taken"
  end

  # Password not exceed 128 characters
  it "password exceeds 128 characters should have correct error message" do
    user = User.new(:username => "andy", :password => "1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890")
    user.save
    assert user.errors.full_messages[0] == "Password is too long (maximum is 128 characters)"
  end
  
  ## Running Rspec remotely (RoR)
  ## Credit: Yong Hoon Lee
  ## Source: https://sites.google.com/a/eecs.berkeley.edu/cs169-sp13/project/setting-up-a-deployment-site
  after(:each) do
    User.delete_all
  end
end
